$containerWidth: 4rem;
$containerHeight: $containerWidth;
$upperHeight: $containerWidth*0.6;
$lowerHeight: $containerWidth*0.27;
$internalWidth: $upperHeight*0.59;
$transitionDuration: 0.5s;
$animationDuration: 1s;
$angle: 35deg;
$sideAngle: 360deg/4;
$opacity: 0.75;
$color: rgba(0, 0, 0, $opacity);
$translateZ: $upperHeight*0.28;
$translateY: $lowerHeight*0.22;
$translateLowerZ: -$translateZ;
$translateLowerY: -$translateY + $upperHeight;
$rotateX: $angle;
@keyframes roll {
    10% { transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg) }
    30% { transform: rotateX(120deg) rotateY(240deg) rotateZ(0deg) translateX(.5rem) translateY(.5rem) }
    50% { transform: rotateX(240deg) rotateY(480deg) rotateZ(0deg) translateX(-.5rem) translateY(-.5rem) }
    70% { transform: rotateX(360deg) rotateY(720deg) rotateZ(0deg) }
    90% { transform: rotateX(480deg) rotateY(960deg) rotateZ(0deg) }
}
.content {
  margin: auto auto;
  position: relative;
  width: $containerWidth;
  height: $containerHeight;
  perspective: 800px;
}
@for $i from 0 through 100 {
  .die-#{$i}{
    position: absolute;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transition: transform $transitionDuration ease-out;
    cursor: pointer;
    &.reset {
      transition: transform 0.1s ease-out;
      transform: rotateX(0);
    }
    &.rolling {
      animation: roll $animationDuration linear;
    }
    @for $i from 1 through 8 {
      &[data-face="#{$i}"] {
        @if $i % 2 == 0 {
          $angleMultiplier: $i / 2;
          transform: rotateX(-$angle) rotateY($sideAngle * $angleMultiplier);
        } @else {
          $angleMultiplier: ($i + 1) / 2;
          transform: rotateX(-180 - $angle) rotateY(-$sideAngle * $angleMultiplier);
        }
      }
      .face.face-#{$i} {
        @if $i % 2 == 0 {
          // even sides are in the upper position of the die
          $angleMultiplier: $i / 2;
          transform: rotateY(-($sideAngle) * $angleMultiplier) translateZ($translateZ) translateY($translateY) rotateX($angle);
        } @else {
          $angleMultiplier: ($i + 1) / 2;
          transform: rotateY(($sideAngle) * $angleMultiplier) translateZ($translateLowerZ) translateY($translateLowerY) rotateZ(180deg) rotateY(180deg) rotateX($angle);
        }
      }
    }
    .face {
      $horizontalMargin: -$internalWidth;
      position: absolute;
      left: 50%;
      top: 0;
      margin: 0 $horizontalMargin;
      border-left: $internalWidth solid transparent;
      border-right: $internalWidth solid transparent;
      border-bottom: $upperHeight solid $color;
      width: 0px;
      height: 0px;
      transform-style: preserve-3d;;
      backface-visibility: hidden;;
      counter-increment: steps 1;
      &:first-child {
        counter-increment: steps 1;
      }
      &:before {
        content: counter(steps);
        position: absolute;
        top: $upperHeight*0.10;
        left: -$internalWidth;
        color: #fff;
        text-shadow: 1px 1px 3px #000;
        font-size: $upperHeight*0.45;
        text-align: center;
        line-height: $upperHeight;
        width: $internalWidth*2;
        height: $upperHeight;
      }
    }
  }
}
